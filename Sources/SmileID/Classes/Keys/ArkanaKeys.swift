// swiftlint:disable all
// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xb9, 0xa8, 0xfc, 0x6a, 0x9c, 0xea, 0x80, 0xe4, 0x5c, 0x74, 0x1, 0x3b, 0x32, 0xaf, 0x5b, 0x18, 0x1a, 0x48, 0x56, 0x8f, 0xe0, 0xab, 0x62, 0x2d, 0xa8, 0x63, 0x8, 0x9e, 0x3b, 0xce, 0x4e, 0xf6, 0x37, 0x43, 0x70, 0x31, 0xf, 0x96, 0xec, 0x71, 0xda, 0x5, 0xc7, 0x7d, 0xfb, 0x7e, 0xc1, 0x9, 0xe3, 0xec, 0x18, 0x5, 0xf8, 0xbe, 0xf3, 0x50, 0x73, 0x5c, 0xc6, 0x88, 0x9c, 0x6f, 0x10, 0x5c
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let sENTRY_DSN: String = {
            let encoded: [UInt8] = [
                0xd1, 0xdc, 0x88, 0x1a, 0xef, 0xd0, 0xaf, 0xcb, 0x38, 0x4c, 0x30, 0x58, 0x6, 0x9b, 0x6d, 0x29, 0x2d, 0x70, 0x6f, 0xb6, 0xd4, 0xcf, 0x3, 0x4c, 0xc9, 0x56, 0x3a, 0xff, 0x5d, 0xfe, 0x7b, 0x97, 0xf, 0x21, 0x43, 0x1, 0x38, 0xa4, 0x8e, 0x48, 0x9a, 0x6a, 0xf6, 0x4c, 0xce, 0x4a, 0xf0, 0x31, 0xd5, 0xc2, 0x71, 0x6b, 0x9f, 0xdb, 0x80, 0x24, 0x5d, 0x29, 0xb5, 0xa6, 0xef, 0xa, 0x7e, 0x28, 0xcb, 0xd1, 0xd2, 0x3, 0xf3, 0xc5, 0xb4, 0xd1, 0x6c, 0x40, 0x30, 0xd, 0, 0x96, 0x6c, 0x29, 0x29, 0x7d, 0x65, 0xbf, 0xd8, 0x93
            ]
            return ArkanaKeys.decode(encoded: encoded, cipher: ArkanaKeys.salt)
        }()
    }
}

