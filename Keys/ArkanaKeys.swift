// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xad, 0x59, 0, 0x8d, 0x43, 0x40, 0xcb, 0x1, 0x33, 0x78, 0x8f, 0xb3, 0x2d, 0xa9, 0xd, 0xef, 0xf4, 0xf8, 0xe8, 0xa5, 0x55, 0xb6, 0x8b, 0x71, 0x63, 0x2f, 0x4f, 0x5a, 0x8a, 0x84, 0x8e, 0xd6, 0xd8, 0xdb, 0xc8, 0xc6, 0xe, 0x7, 0x36, 0x41, 0x9f, 0xf3, 0x39, 0xed, 0x7, 0x31, 0x70, 0x2, 0x86, 0x45, 0x63, 0xf2, 0xec, 0xe4, 0x69, 0x11, 0x7b, 0x3f, 0x59, 0xf2, 0x1d, 0x97, 0x83, 0xb6
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let sENTRY_DSN: String = {
            let encoded: [UInt8] = [
                0xc5, 0x2d, 0x74, 0xfd, 0x30, 0x7a, 0xe4, 0x2e, 0x1, 0x41, 0xee, 0xd2, 0x1c, 0x9a, 0x3a, 0xd7, 0x90, 0x9c, 0x8a, 0x91, 0x61, 0x83, 0xed, 0x49, 0x5b, 0x4d, 0x7c, 0x69, 0xbb, 0xbc, 0xb6, 0xb4, 0xe1, 0xbf, 0xfa, 0xf0, 0x6f, 0x3e, 0x4, 0x23, 0xdf, 0x9c, 0x8, 0xdc, 0x32, 0x5, 0x41, 0x3a, 0xb0, 0x6b, 0xa, 0x9c, 0x8b, 0x81, 0x1a, 0x65, 0x55, 0x4c, 0x3c, 0x9c, 0x69, 0xe5, 0xfa, 0x98, 0xc4, 0x36, 0x2f, 0xb9, 0x76, 0x70, 0xff, 0x30, 0, 0x4f, 0xba, 0x85, 0x1b, 0x9d, 0x38, 0xdc, 0xc3, 0xce, 0xd8
            ]
            return ArkanaKeys.decode(encoded: encoded, cipher: ArkanaKeys.salt)
        }()
    }
}

